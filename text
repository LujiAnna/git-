0. This file started in remote with name git_
Was cloned as such in folder HYF, hence it has the name git_
1. Renamed remote repo from git- to git_rename_github 
also new file was created in local repo

a. How to incorporate that new name from local repo
b. and incorporate local changes back to remote

Try...


push changes from this git_ back to master 
ls 
> shows the new file text-- the one am writing all this in
$ git status
> shows red text as untracked file
> !!! git add file: use this to track
// oops...before tracking, I changed again this text file by writing this 
line, just save, no need to commit as fike is still untracked yet (no git add, just quick check with git status.. which still shows the red text file as untracked) . now do the add (track your changes in file)
$ git add text
> check status
$ git status
> on branch master: this text file is tracked in branch master
> no commits yet : commit and msg is not done yet
> !!! can use git rm --cashed : to unstage the tracking
> the file is green. indicating that its being tracked
// oops again...after tracking...i modified this text file but writing this
how does the file react in git? (use git status)i need to save. but do i need to retrack? 
what if i go ahead and commit as is? are the new changes incorporated 
$ git status
> shows that changes are not staged. 
> !!! git add file: is suggested to update what will be commited
> !!! git restore file: to discard chnges in the working directory 
> !!! git -A, --all: add changes from all tracked and untracked files
> HINT: always add then commit your changes
> at this point, nothing shows on github
$ git commit -m 'first commit of text' *************************shows on github
> successfully commited. but only in my local repo. 
> check remote repo shows no activity
> i need to update the remote (origin) with local (master) (which has a different name now)
$ git push origin master
>remote: This repository moved. Please use the new location:
remote:   https://github.com/LujiAnna/git_rename_github.git
> check remote repo : nothing shows
> i need to rename this repo now
> $ mv <source_directory> <target_directory>
> linux said no such file/directory
> try to hard rename
$ git status
> wants to stage change for commit
> branch is uptodate with origin/master
$ git commit -am 'second commit..'  *************************shows on github
>successfully
$ git status
> on branch master
> branch is ahaed of o/m by 1 commit 
> git push: to publish your local commits
$ git push origin master  **************MUST DO THIS!!!!!!!!!!!!
> still saying thie repo moved, use new location.
FREESTYLE 
> thinking of ...reclone? or pull
> lets try to do a PR
> nope . stop. redo everything from the beginning and reclone the new repo
> OR rename local back to how it was previous : git-
> then, rename the remote repo back as well to git-
$ git status
$ git commit - am 'back to original'  ****?????- not showing on github. showed after push 
> push wasnt done yet
$ git status
$ git commit - am 'typo on prior...' *****?? not showing on github. showed after push
> git status
> just do add, commit then push immediately
> chech github > still first and second commit
> question, what if you commit before adding
$ git commit -m 'commit bofere adding' ??????DIDNT SHOW UP ON GITHUB, coz u didnt ADD!!!
>on branch master
> master is ahead of o/m by 2 commits
> lets go ahead and push ..remember we didnt add sth before 'commit b4 adding'
$ git push origin master  **************MUST DO THIS!!!!!!!!!!!!
> check in github
$ git commit -am 'fifth commit before push'

> Question: if i change repos name locally, and needs to perform push, what happens
> quesstion next : what happens if i change name of file in a repo (case 1 locally, case to remote)

====================?BRANCHING OFF MASTER: github/git-flow==================
- feature branch
- direct deplyment
- regular deployment
- continuos delivery
- hw 2 : dev strategy
description : commit to master separate branches, 
then push the *master to github. then iterate (git push origin master)
- do same for branch 2, 3 , ...etc

# created files : file and readme 
$ touch file readme.md 
# create branch file 
$ git branch file 
# check to see which branch you are currently in 
$ git branch 
> currently its master and it is green 
> branch is up to date with o/m 
> git add file : to update what will be commited 
# check to see status of your files 
$ git status 
> both file and readme.md are red . what about text ? 
this file am currently writing in doesnt seem to 

# creating a feature1 branch 
# branch off from master branch 
//$ git checkout -b feature1 master 
> switch to  new branch feature1 
# question, what is -b flag in git? 
: `git` tells the console to load git program from the system path , 
after that, each word gets inputted into the git program 
To get help to see which types of commands we can input in git, use --help 
$ git --help 
> git help -a or git help -g or git help <concept> to read about 
specific subcommand/guide/concept 
> Read more about this from git documentation found at git-scm.com/docs/git-checkout ...

IMPORTANT: from what we have practised above, it is important to add and commit 
you dont have to push, as all commits will show up either way in any PUSH you do further down the line 

back to creating branch and push directly!

$ git status
still reds 
$ git branch
master and file 
$ git checkout -b feature1 master
> M   text ...what does this even mean ????
> Switched to a new branch 'feature1'
# maybe add particular file 
$ git add file 
# maybe commit changes as well
$ git commit -m 'first command in first feature'
# remember nothing shows in the github as nothing is pushed yet 
# imncorporating a finished feature1 on master, switch branch to master 
$ git checkout master
# check which branch you had 
$ git branch 
# you should be on master
# first add and commmit all the new changes in files at master 
which ones are they?
$ git status 
> notice file file is no longer red, only text (this one ), and other files readme 
$ git add text 
# check to see how it all is 
$ git status
> after tracking/add text, text file is green now  
# add  changes / commit  
$ git commit -m 'added stuff in text before after branching off and back '
# about to push feature1 branch ...


after adding the touched text file thru master and while in master...
!!!do MERGE of feature1 to master, so u can push the master back to origin 
and NOT the feature as is back to origin as in homework2 dev-strategy 

# first check which branches names are there especially one u want to merge 
$ git branch 
# choose branch you want to merge back to master 
$ git merge feature1 

# see how to deal with merge msg

# next time try to use --no -ff for no fastforward to create a new commit 
 even if merge could be performed with fast-forward 

$ git branch 
$ git status

!!!!!!# time to push the master whihc merged with feature1 branch back to remote 
# REMEMBER you are pushing MERGED MASTER TO ORIGIN !!!VERY IMPORTANT ***

# you should no commits yet, until you have accepted the Pull (which is push really) request on the particular repo
!!!!! # so check your github repo 
!!!! # careful you might see changes after some minutes! so PATIENCE











 
====================BRANCHING OFF MASTER: github/git-flow==================
- feature branch
- hw 1 : branchies
description : commit to master separate branches, 
then push that particular *branch to github /origin. then iterate (git push origin feature)
- do same for branch 2, 3 , ...etc



